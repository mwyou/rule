proxy-providers:
  Airport1:
    url: "https://ktmcloud.ink/api/v1/client/subscribe?token=d34c580036d0ca04325a4a7729870eb3"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🟢 直连

proxies:
  - {name: 🟢 直连, type: direct}
  
# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
# interface-name: enp6s18
log-level: warning
find-process-mode: 'off'
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
profile:
  store-selected: true
  store-fake-ip: true

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  #使用nikki，混入全部不修改的情况，开启接口指定为nikki
  #使用仅内核自行修改下面三项为true
  #device: nikki
  auto-route: false
  auto-redirect: false
  auto-detect-interface: false

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.market.xiaomi.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
  
pr: &pr {type: select, proxies: [🚀 节点选择,🟢 直连]}

proxy-groups:
  - {name: 🚀 节点选择, type: select, include-all: true, filter: "(?i)新加坡|sg|日本|jp"}
  - {name: 📹 YouTube, type: select, include-all: true, filter: "(?i)新加坡|sg|日本|jp"}
  - {name: 🍀 Google, type: select, include-all: true, filter: "(?i)新加坡|sg|日本|jp"}
  - {name: 👨🏿‍💻 GitHub, type: select, include-all: true, filter: "(?i)新加坡|sg|日本|jp"}
  - {name: 🤖 OpenAI, type: select, include-all: true, filter: "(?i)新加坡|sg|日本|jp"}
  - {name: 🎥 NETFLIX, type: select, include-all: true, filter: "(?i)新加坡|sg|日本|jp"}
  - {name: 📲 Telegram, type: select, include-all: true, filter: "(?i)新加坡|sg|日本|jp"}
  - {name: 🎵 TikTok, type: select, include-all: true, filter: "(?i)新加坡|sg|日本|jp"}
  - {name: 🐟 漏网之鱼, <<: *pr}

rules:
  - RULE-SET,private_domain,🟢 直连
  - RULE-SET,youtube,📹 YouTube
  - RULE-SET,google,🍀 Google
  - RULE-SET,github,👨🏿‍💻 GitHub
  - RULE-SET,openai,🤖 OpenAI
  - RULE-SET,netflix,🎥 NETFLIX
  - RULE-SET,telegram,📲 Telegram
  - RULE-SET,tiktok,🎵 TikTok
  - MATCH,🐟 漏网之鱼
  
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

rule-providers:
  youtube: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs" }
  google: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs" }
  github: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs" }
  openai: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/openai.mrs" }
  netflix: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs" }
  telegram: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs" }
  tiktok: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs" }
